
# Удаляем статические upstream блоки, используем переменные напрямую в proxy_pass

resolver 127.0.0.11 valid=30s ipv6=off;

server {
    listen 80;
    server_name 24updev.ru www.24updev.ru api.24updev.ru www.api.24updev.ru ai.24updev.ru www.ai.24updev.ru;
    
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri =404;
    }
    
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    http2 on;
    server_name 24updev.ru www.24updev.ru;
    
    ssl_certificate /etc/letsencrypt/live/24updev.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/24updev.ru/privkey.pem;
    
    # Оптимизированные SSL настройки
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozTLS:10m;
    ssl_session_tickets off;
    
    # OCSP stapling отключен для совместимости
    ssl_stapling off;
    ssl_stapling_verify off;
    
    # Все остальные запросы к основному Next.js приложению
    location ^~ / {
        # Логирование для основного фронтенда
        access_log /var/log/nginx/frontend.log debug;
        add_header X-Debug-Location "frontend" always;
        add_header X-Debug-URI "$request_uri" always;
        
        # CSP заголовки для фронтенда с поддержкой S3 изображений
        add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' 'unsafe-eval'; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: https://s3.twcstorage.ru; connect-src 'self' https://api.24updev.ru wss: ws:;" always;
        
        # Используем переменную для динамического разрешения хоста
        set $frontend_upstream http://up_frontend:3000;
        proxy_pass $frontend_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        
        # Настройки для корректной передачи куки
        proxy_set_header Cookie $http_cookie;
        proxy_pass_header Set-Cookie;
        
        # Таймауты и буферизация
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        proxy_temp_file_write_size 8k;
        
        # Поддержка WebSocket для Next.js HMR
        proxy_set_header Sec-WebSocket-Extensions $http_sec_websocket_extensions;
        proxy_set_header Sec-WebSocket-Key $http_sec_websocket_key;
        proxy_set_header Sec-WebSocket-Version $http_sec_websocket_version;
    }
    # Nginx будет возвращать 502 ошибку при недоступности фронтенда
}

server {
    listen 443 ssl;
    http2 on;
    server_name api.24updev.ru;
    
    ssl_certificate /etc/letsencrypt/live/api.24updev.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.24updev.ru/privkey.pem;
    
    # Оптимизированные SSL настройки с улучшенной совместимостью
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozTLS:10m;
    ssl_session_tickets off;
    
    # OCSP stapling отключен для совместимости
    ssl_stapling off;
    ssl_stapling_verify off;

    # Все остальные запросы к бэкенду
    location / {
        # Используем переменную для динамического разрешения хоста
        set $backend_upstream http://up_backend:8000;
        proxy_pass $backend_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Настройки для корректной передачи куки
        proxy_set_header Cookie $http_cookie;
        proxy_pass_header Set-Cookie;
        
        # Разрешаем загрузку ресурсов для Swagger UI и S3 изображений
        add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; font-src 'self' https://cdn.jsdelivr.net; img-src 'self' data: https: https://s3.twcstorage.ru;" always;
        
        # Таймауты для API
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Буферизация для API
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Rate limiting (опционально)
        # limit_req zone=api burst=20 nodelay;
    }

    # Nginx будет возвращать 502 ошибку при недоступности бэкенда
}

server {
    listen 443 ssl;
    http2 on;
    server_name ai.24updev.ru;
    
    ssl_certificate /etc/letsencrypt/live/ai.24updev.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/ai.24updev.ru/privkey.pem;
    
    # Оптимизированные SSL настройки с улучшенной совместимостью
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozTLS:10m;
    ssl_session_tickets off;
    
    # OCSP stapling отключен для совместимости
    ssl_stapling off;
    ssl_stapling_verify off;

    # Все остальные запросы к бэкенду
    location / {
        # Используем переменную для динамического разрешения хоста
        set $backend_upstream http://up_ai:8001;
        proxy_pass $backend_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Настройки для корректной передачи куки
        proxy_set_header Cookie $http_cookie;
        proxy_pass_header Set-Cookie;
        
        # Разрешаем загрузку ресурсов для Swagger UI и S3 изображений
        add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; font-src 'self' https://cdn.jsdelivr.net; img-src 'self' data: https: https://s3.twcstorage.ru;" always;
        
        # Таймауты для API
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Буферизация для API
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Rate limiting (опционально)
        # limit_req zone=api burst=20 nodelay;
    }

    # Nginx будет возвращать 502 ошибку при недоступности бэкенда
}

server {
    listen 443 ssl;
    http2 on;
    server_name www.api.24updev.ru;
    
    ssl_certificate /etc/letsencrypt/live/api.24updev.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.24updev.ru/privkey.pem;
    
    return 301 https://api.24updev.ru$request_uri;
} 